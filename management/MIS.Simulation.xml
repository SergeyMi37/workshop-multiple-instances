<?xml version="1.0" encoding="UTF-8"?>
<Export generator="IRIS" version="26" zv="IRIS for UNIX (Ubuntu Server LTS for x86-64 Containers) 2021.2 (Build 649U)" ts="2022-04-15 21:08:16">
<Class name="MIS.Simulation">
<Description>
simulation of various activities for MIS classes</Description>
<TimeChanged>66214,76066.9909529</TimeChanged>
<TimeCreated>66200,70610</TimeCreated>

<Method name="MakeAppErrors">
<Description>
generate some errors in the Application Error Log in current namespace</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>count:%Integer</FormalSpec>
<Implementation><![CDATA[
	for i=1:1:count {
		set r = $random(4)
		if r=0     {do undef}
		elseif r=1 {do divide}
		elseif r=2 {do noline}
		else       {do norou}
	}
	write !, count, " errors added to error log."
	quit
undef ; <UNDEFINED>
	set $ztrap = "error" write fred
	quit
divide ; <DIVIDE>
	set $ztrap = "error" write 1/0
	quit
noline ; <NOLINE>
	set $ztrap = "error" do fred^%SS
	quit
norou ; <NOROUTINE>
	set $ztrap = "error" do ^fred
	quit
error ; log errors
	set $ztrap = ""
	do BACK^%ETN
	quit
]]></Implementation>
</Method>

<Method name="StressGlobals">
<Description><![CDATA[
Set many globals and then kill them in the current namespace<br>
   watch the ^GLOSTAT cache efficiency while this runs<br>
   delay adds a hang between iterations:  1=long, 2=short, otherwise none<br>
   <br>
   all the s1 and s2 statements are kept in the ^||gloset global randomly indexed,<br>
   and then we run thru the global; this "spreads out" the sets. <br>
   all the k1 and k2 statements are kept in the ^||glokill global randomly indexed, <br>
   and then we run thru the global; this "spreads out" the kills.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>count:%Integer=50,prefix:%String="jj",delay:%Integer=0</FormalSpec>
<Implementation><![CDATA[
	set rand = count * 50
	set delay = $case(delay, 1:3, 2:1, :0)
	kill ^||gloset, ^||glokill
 
	for i=1:1:count {
		set glo = "^" _ prefix
		for j=1:1:3 { set glo = glo _ $char($random(26)+97)}    ; global name
		for k=1:1:10 {
			set num = $random(1000000)                      ; subscript
			set dat = ""
			; data value
			for j=1:1:3 {set dat = dat _ $char($random(26)+97)}
			; set into global
			set s1 = "set " _ glo _ "(" _ num _ ")=""" _ dat _ """"
			; set into index
			set s2 = "set " _ glo _ "ndx(""" _ dat _ """)=" _ num
			set k1 = "kill " _ glo _ "(" _ num _ ")"        ; kill global node      
			set k2 = "kill " _ glo _ "ndx(""" _ dat _ """)" ; kill index node
			set kf = "kill " _ glo _ ", " _ glo _ "ndx"     ; kill roots
			// write !,s1,!,s2,k1,!,k2,!,kf
			do { set r1 = $random(rand) } while $data(^||gloset(r1))
			set ^||gloset(r1) = s1
			do { set r2 = $random(rand) } while $data(^||gloset(r2))
			set ^||gloset(r2) = s2
			do { set r1 = $random(rand) } while $data(^||glokill(r1))
			set ^||glokill(r1) = k1
			do { set r2 = $random(rand) } while $data(^||glokill(r2))
			set ^||glokill(r2) = k2
		}
		// the final kills of the roots happen at the end
		do { set r3 = $random(rand) } while $data(^||glokill("a" _ r3))
		set ^||glokill("a" _ r3) = kf
	}
	write !,"Setting"
	set r1 = ""
	for {
		set r1 = $order(^||gloset(r1),1,s1)
		quit:(r1 = "")
		;write !, s1
		write "."
		xecute s1
		hang delay
	}
	;read !,"Press <Enter> to begin deletions",x
	write !,"Deleting"
	set r1 = ""
	for {
		set r1 = $order(^||glokill(r1),1,k1)
		quit:(r1 = "")
		;write !, k1
		write "."
		xecute k1
		hang delay
	}
]]></Implementation>
</Method>

<Method name="StressRoutines">
<Description><![CDATA[
generate a cascading tree of routine calls in the current namespace<br>
   watch the ^GLOSTAT routine statistics while this runs<br>
   depth: depth of tree, breadth: breadth of tree<br>
   depth + breadth should be between 5 (default generates a tree of 7 routines) and 11<br>
       for comparison purposes:<br>
       * depth = 5 and breadth = 6 generates 1555 routines<br>
       * depth = 6 and breadth = 5 generates 3906 routines<br>
       * depth = 6 and breadth = 6 generates 9331 routines<br>
       * depth = 3 and breadth = 8 generates 73 routines<br>
       * depth = 8 and breadth = 3 generates 3280 routines<br>
       * depth = 10 and breadth = 10 generates 1,111,111,111 routines<br>
   time: number of minutes to run through the tree after it's built]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>depth:%Integer=3,breadth:%Integer=2,time:%Numeric=1</FormalSpec>
<Implementation><![CDATA[
	// this limits how many routines get generated
	// comment this out at your own risk!
	if (depth + breadth) > 11 {
		write !, "Depth + breadth should be less than 12"
		quit  ; too big!
	}
	// callers is the number of routines that will call other routines
	// all but the leaves in the tree
	set callers = 1
	for i=1:1:(depth - 2) { set callers = callers + (breadth ** i) }
	set callees = (breadth ** (i + 1))
	// total is the total number of routines to generate
	set total = callers + callees
	write !,"Press <Enter> to start routine generation of ", total, " routines"
	read x
	// generate the callers
	for i=1:1:callers {
		set name = "r" _ i _ ".INT"
		set rou = ##class(%Routine).%New(name)
		set line = " do "
		for j=1:1:breadth {
			set r = (i * breadth) - (breadth - 1) + j
			set call = "^r" _ r
			set line = line _ call
			set:(j '= breadth) line = line _ ", "
        }
		do rou.WriteLine(" set x = " _ i)
		do rou.WriteLine(line)
		do rou.WriteLine(" quit")
		do rou.Save()
		do rou.Compile("/nodisplay")
		if (i#20)=0 { write "." }
		kill rou
	}
	// generate the callees
	for i=(callers+1):1:total {
		set name = "r" _ i _ ".INT"
		set rou = ##class(%Routine).%New(name)
		do rou.WriteLine(" set x = " _ i)
		do rou.WriteLine(" quit")
		do rou.Save()
		do rou.Compile("/nodisplay")
		if (i#20)=0 { write "." }
		kill rou
	}
	read !, "Press <Enter> to begin calling the routines", x
	set count = 0
	set starttime = $p($h, ",", 2)
	set endtime = starttime + (time * 60)
	write "...calling routines."
	while ($p($h, ",", 2) < endtime) {
		do ^r1 ; start the whole process
		set count = (count + 1) 
		if (count#10000)=0 { write "." }
	}
	set realendtime = $p($h, ",", 2)
	set elapsed = (realendtime - starttime)
	set callspersecond = $j((count * total) / elapsed, 0, 1)
	write !, "Called ", callspersecond, " routines/second"
	// clean up
	read !, "Press <Enter> to delete the generated routines", x
	for i=1:1:total {
		set name1 = "r" _ i _ ".INT"
		set name2 = "r" _ i _ ".OBJ"
		set x = $$DEL^%R(name1)
		set x = $$DEL^%R(name2)
		if (i#10)=0 { write "." }
	}
]]></Implementation>
</Method>

<Method name="FileFull">
<Description><![CDATA[
cause a &lt;FILEFULL&gt; in USER]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	try {
		new $namespace set $namespace = "USER"
		// create <FILEFULL>
		set random = $random(10000)
		for i=1:1:10000000 set ^FileFull(random, i)="test #" _ i
	}
	catch ex {
		quit
	}
]]></Implementation>
</Method>

<Method name="CheckAppErrors">
<Description><![CDATA[
if run from %ZSTART, use System Operation > Processes > Terminate to stop it<br>
if run from Terminal, use Ctrl-C to stop it.<br>
checks App Error Log every # minutes and writes message to Console Log 
 if there are more than # errors<br>
defaults to current namespace, but you can supply alternate ]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String=$namespace,minutes:%Integer=1,errors:%Integer=1</FormalSpec>
<Implementation><![CDATA[
	try {
		new $namespace set $namespace = namespace
		set count = 1
		for {
			// if there are more than "errors" App Errors yesterday or today
			// write message to Console Log
			set yesterday = $get(^ERRORS($h-1), 0), today = $get(^ERRORS(+$h), 0)
		 	if (yesterday > errors) || (today > errors) {
		 		set message = "More than " _ errors _ " Application Errors in " _ namespace
		 					   _ " (yesterday:" _ yesterday _ ", today:" _ today _ ")"
		 		               _ ", written " _ count _ " time(s)"
		 		set count = count + 1
				do ##class(%SYS.System).WriteToConsoleLog(message)
			}
			hang (minutes * 60)		
	    }
	}
	catch ex {
		// if run from Terminal and user typed Ctrl-C just quit
		quit:(ex.Name = "<INTERRUPT>")
		write !, ex.DisplayString()
	}
]]></Implementation>
</Method>

<Method name="Backup">
<Description><![CDATA[
Simulates an external backup of the COMPANY or FILMS database by using ExternalFreeze and ExternalThaw. <br>
 Creates a Phonebook.Company or Cinema.Film while the system is frozen, so it will not be included in the backup.<br>
 To customize, add these globals in %SYS<br>
 * backup directory:  ^MIS.Simulation("Backup", "backupdir")<br>
 * backup DB: ^MIS.Simulation("Backup", "dbname")<br>
 * object class: ^MIS.Simulation("Backup", "class")
 * object property: ^MIS.Simulation("Backup", "property")
 * namespace: ^MIS.Simulation("Backup", "NS")]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	try {
		new $namespace set $namespace = "%SYS"
		set backupdir=$get(^MIS.Simulation("Backup","backupdir"),"/backups")
		set backupdir=##class(%File).NormalizeDirectory(backupdir)
	
		//Make sure backupdir exists
		if (##class(%File).DirectoryExists(backupdir) '= 1) {
			write !, "Backup directory ", backupdir, " does not exist. Please contact instructor"
			quit		
		}
	
		// Determine IRIS vs Cache for database filename
		if ($system.Version.GetProduct() [ "IRIS") {
			set filename = "IRIS.DAT"
		}
		else {
			set filename = "CACHE.DAT"
		}
	
		if ##class(Config.Databases).Exists("COMPANY") {
			set dbName = "COMPANY"
			set objectClass = "Phonebook.Company"
			set property = "Name"
			set namespace = "PHONEBOOK"
		}
		elseif ##class(Config.Databases).Exists("FILMS") {
			set dbName = "FILMS"
			set objectClass = "Cinema.Film"
			set property = "Title"
			set namespace = "TRAINING"
		}
		else {
			// custom DB
			set dbName=$get(^MIS.Simulation("Backup","dbName"))
			if '##class(Config.Databases).Exists(dbName) {
				write "Database ", dbName, " does not exist. Please contact instructor"
				quit
			}
			set objectClass = $get(^MIS.Simulation("Backup","class"))
			set property = $get(^MIS.Simulation("Backup","property"))
			set namespace = $get(^MIS.Simulation("Backup","NS"))
		}
		set db=##class(Config.Databases).Open(dbName)
		set dbDir=db.Directory
	
		write !, "Freezing System..."
		set st = ##class(Backup.General).ExternalFreeze()
		$$$ThrowOnError(st)
		write "Frozen."
		
		write !, "Creating new ", objectClass, " with ", property, " = ""Backup Demo""..."
		set $namespace = namespace
		set obj = $system.OBJ.New(objectClass)
		set $property(obj, property) = "Backup Demo"
		set st = obj.%Save()
		if $$$ISERR(st) {
			do $system.Status.DisplayError(st)
		}
		else {
			write "Created."
		}		
		set $namespace = "%SYS"
		write !, "Copying ", dbName, " Database to /backups..."
		set success = ##class(%Library.File).CopyFile(dbDir_filename, backupdir_filename)
		if $$$ISERR(success) {
			$$$ThrowStatus($$$ERROR($$$GeneralError, "Failed to copy database file"))
		}
		write "Copied."
		
		write !, "Thawing System..."
		set st = ##class(Backup.General).ExternalThaw()
		$$$ThrowOnError(st)
		write "Thawed."
		
		write !, "Backup completed successfully!"
	}
	catch ex {
		write !, "Backup failed."
		write !, ex.DisplayString()
		
		// In event of an exception, make sure we are thawed
		set $namespace = "%SYS"
		set st = ##class(Backup.General).ExternalThaw()
		if $$$ISERR(st) {
			do $system.Status.DisplayError(st)
		}
		else { write "Thawed."}
	}
]]></Implementation>
</Method>

<Method name="Crisis">
<Description>
simulate a crisis by deleting all companies in PHONEBOOK
optionally switch the journal beforehand so deletions are separated</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>switch:%Boolean=0</FormalSpec>
<Implementation><![CDATA[
	if switch {
		new $namespace set $namespace = "%SYS"
		set st = ##class(%SYS.Journal.System).SwitchFile()
		set $namespace="PHONEBOOK"
		write "Switched Journal file. "
	}
	do ##class(Phonebook.Company).%KillExtent()
	write "Deleted all companies."
]]></Implementation>
</Method>

<Method name="Restore">
<Description><![CDATA[
Simulates an external restore of the COMPANY database<br>]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	try {
		new $namespace set $namespace = "%SYS"
		set backupdir=$get(^MIS.Simulation("Backup","backupdir"),"/backups")
		set backupdir=##class(%File).NormalizeDirectory(backupdir)
		
		// Determine IRIS vs Cache for database filename
		if ($system.Version.GetProduct() [ "IRIS") {
			set filename = "IRIS.DAT"
		}
		else {
			set filename = "CACHE.DAT"
		}

		if ##class(Config.Databases).Exists("COMPANY") {
			set dbName = "COMPANY"
		}
		elseif ##class(Config.Databases).Exists("FILMS") {
			set dbName = "FILMS"
		}
		else {
			// custom DB
			set dbName=$get(^MIS.Simulation("Backup","dbName"))
			if '##class(Config.Databases).Exists(dbName) {
				write "Database ", dbName, " does not exist. Please contact instructor"
				quit
			}
		}
		set db=##class(Config.Databases).Open(dbName)
		set dbDir=db.Directory			
		write !, "Copying backup to ", dbName, " database directory..."
			
		do ##class(SYS.Database).DismountDatabase(dbDir)
		set success = ##class(%Library.File).CopyFile(backupdir_filename, dbDir_filename)
		if $$$ISERR(success) {
			$$$ThrowStatus($$$ERROR($$$GeneralError, "Failed to copy database file"))
		}
		do ##class(SYS.Database).MountDatabase(dbDir)
		write "Copied."
	}
	catch ex {
		write "Failed."
		write !, ex.DisplayString()		
	}
]]></Implementation>
</Method>
</Class>
</Export>
