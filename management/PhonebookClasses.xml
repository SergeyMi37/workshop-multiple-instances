<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache for Windows (x86-32) 2008.1 (Build 545)" ts="2008-06-24 16:01:40">
<Class name="Phonebook.AllStart">
<Description>
Created using the page template: Column 2</Description>
<Super>Phonebook.Template</Super>
<TimeCreated>60841,57940.518217</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>Phonebook.PhonebookApp</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Home</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
</Parameter>

<Parameter name="ERRORPAGE">
<Default>/csp/samples/error.csp</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">

</style>
]]></Data>
</XData>

<XData name="RightSideContents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen">

<html id="stuff"  OnDrawContent="PrintStuff" />

</pane>
]]></Data>
</XData>

<Method name="PrintStuff">
<Description>
PrintStuff</Description>
<FormalSpec>pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	&html<<p><table>
	<tr><td><b>Username: </b></td><td> #($USERNAME)#</td></tr>
	<tr><td><b>Roles: </b></td><td> #($ROLES)#</td></tr>
	<tr><td><b>Version: </b></td><td> #($ZV)#</td></tr>
	</table></p>>	
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Phonebook.Company">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeCreated>60120,37937.557632</TimeCreated>

<Property name="Name">
<Type>%String</Type>
<Parameter name="POPSPEC" value="Company()"/>
</Property>

<Index name="NameIndex">
<Properties>Name</Properties>
</Index>

<Property name="Address">
<Type>%String</Type>
<Parameter name="POPSPEC" value="Street()"/>
</Property>

<Query name="SelectCompanies">
<Type>%SQLQuery</Type>
<SqlQuery>	SELECT %ID,Name,Address FROM Company</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Phonebook.CompanyD</DataLocation>
<DefaultData>CompanyDefaultData</DefaultData>
<IdLocation>^Phonebook.CompanyD</IdLocation>
<IndexLocation>^Phonebook.CompanyI</IndexLocation>
<StreamLocation>^Phonebook.CompanyS</StreamLocation>
<Data name="CompanyDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Address</Value>
</Value>
<Value name="3">
<Value>Name</Value>
</Value>
</Data>
<Property name="Address"/>
<Property name="Name"/>
</Storage>
</Class>


<Class name="Phonebook.CompanyData">
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeCreated>60120,47929.607299</TimeCreated>

<Property name="Name">
<Type>%String</Type>
</Property>

<Property name="Address">
<Type>%String</Type>
</Property>

<Property name="CompanyID">
<Type>%String</Type>
</Property>
</Class>


<Class name="Phonebook.CompanyList">
<Super>%Library.ListOfObjects,%XML.Adaptor</Super>
<TimeCreated>60145,38786.251115</TimeCreated>

<Parameter name="ELEMENTTYPE">
<Default>Phonebook.CompanyData</Default>
</Parameter>

<Storage name="Custom">
<Type>%Library.CompleteCustomStorage</Type>
</Storage>
</Class>


<Class name="Phonebook.Contact">
<Abstract>1</Abstract>
<ClassType/>
<Super>%Persistent,%Populate,%ZEN.DataModel.Adaptor,%XML.Adaptor</Super>
<TimeCreated>60110,51049.155795</TimeCreated>

<Property name="Name">
<Type>%String</Type>
<Parameter name="POPSPEC" value="Name()"/>
</Property>

<Index name="NameIndex">
<Properties>Name</Properties>
</Index>

<Property name="Title">
<Type>%String</Type>
<Parameter name="POPSPEC" value="Title()"/>
</Property>

<Property name="Pager">
<Type>%String</Type>
<Parameter name="POPSPEC" value="USPhone()"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
//Property Company As %String(VALUELIST = ",Acme Industrial,Widget World,Sunnydale Pest Control");

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//Property CompanyAddress As %String(POPSPEC = "City()");

]]></Content>
</UDLText>

<Property name="HomePhone">
<Type>%String</Type>
<Parameter name="POPSPEC" value="USPhone()"/>
</Property>

<Property name="OfficePhone">
<Type>%String</Type>
<Parameter name="POPSPEC" value="USPhone()"/>
</Property>

<Property name="CellPhone">
<Type>%String</Type>
<Parameter name="POPSPEC" value="USPhone()"/>
</Property>

<Property name="Active">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
<Required>1</Required>
</Property>

<Index name="ActiveIndex">
<Properties>Active</Properties>
</Index>

<Property name="Email1">
<Type>%String</Type>
</Property>

<Property name="Email2">
<Type>%String</Type>
</Property>

<Property name="Owner">
<Type>%String</Type>
</Property>

<Property name="Note">
<Type>%String</Type>
<Parameter name="ZENCONTROL" value="textarea"/>
</Property>

<Property name="Company">
<Type>Phonebook.Company</Type>
<Parameter name="ZENSQL" value="SELECT ID,Name FROM Phonebook.Company WHERE Name %STARTSWITH ? ORDER BY Name"/>
<Parameter name="ZENSQLLOOKUP" value="SELECT Name FROM Phonebook.Company WHERE ID = ?"/>
</Property>
</Class>


<Class name="Phonebook.ContactData">
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeCreated>60117,41765.639827</TimeCreated>

<Property name="ContactID">
<Type>%String</Type>
</Property>

<Property name="Name">
<Type>%String</Type>
</Property>

<Property name="Title">
<Type>%String</Type>
</Property>

<Property name="Pager">
<Type>%String</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
//Property Company As %String;

]]></Content>
</UDLText>

<Property name="Company">
<Type>Phonebook.CompanyData</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
//Property CompanyAddress As %String;

]]></Content>
</UDLText>

<Property name="HomePhone">
<Type>%String</Type>
</Property>

<Property name="OfficePhone">
<Type>%String</Type>
</Property>

<Property name="CellPhone">
<Type>%String</Type>
</Property>

<Property name="Active">
<Type>%Boolean</Type>
</Property>

<Property name="Email1">
<Type>%String</Type>
</Property>

<Property name="Email2">
<Type>%String</Type>
</Property>

<Property name="Owner">
<Type>%String</Type>
</Property>

<Property name="Note">
<Type>%String</Type>
</Property>
</Class>


<Class name="Phonebook.ContactFacade">
<TimeChanged>61801,44883.858993</TimeChanged>
<TimeCreated>60117,39839.260342</TimeCreated>

<Parameter name="MAP">
<Type>COSEXPRESSION</Type>
<Default>$LISTBUILD("","Active","CellPhone","Company","Email1","Email2","HomePhone","Name","Note","OfficePhone","Owner","Pager","Title")</Default>
</Parameter>

<Method name="CustomerByName">
<ClassMethod>1</ClassMethod>
<FormalSpec>Name:%String,owner:%String</FormalSpec>
<ReturnType>Phonebook.ContactData</ReturnType>
<Implementation><![CDATA[
	set (StartName,NextName)=" "_$zcvt($zstrip(Name,">W"),"U")
	if '$d(^Phonebook.CustomerI("NameIndex",StartName))
	{
		// find first possible matching name, quit if no match
		set NextName=$o(^Phonebook.CustomerI("NameIndex",StartName))
		quit:($e(NextName,1,$l(StartName))'=StartName) ""
	}
	
	// loop to find first matching name that is also active
	for
	{
		set custID=$o(^Phonebook.CustomerI("NameIndex",NextName,""))	
		set active=$d(^Phonebook.CustomerI("ActiveIndex",1,custID))
		quit:active
		// try the next name
		set custID=0
		set NextName=$o(^Phonebook.CustomerI("NameIndex",NextName))
		quit:($e(NextName,1,$l(StartName))'=StartName)
	}
	
	quit:(custID=0) ""
	set pContact=..GetContact("Customer",custID)
	set dContact=..BuildContact(pContact,custID)
	quit dContact
]]></Implementation>
</Method>

<Method name="VendorByName">
<ClassMethod>1</ClassMethod>
<FormalSpec>Name:%String,owner:%String</FormalSpec>
<ReturnType>Phonebook.ContactData</ReturnType>
<Implementation><![CDATA[
	set (StartName,NextName)=" "_$zcvt($zstrip(Name,">W"),"U")
	if '$d(^Phonebook.VendorI("NameIndex",StartName))
	{
		// find first possible matching name, quit if no match
		set NextName=$o(^Phonebook.VendorI("NameIndex",StartName))
		quit:($e(NextName,1,$l(StartName))'=StartName) ""
	}
	
	// loop to find first matching name that is also active
	for
	{
		set vendID=$o(^Phonebook.VendorI("NameIndex",NextName,""))
		set active=$d(^Phonebook.VendorI("ActiveIndex",1,vendID))
		quit:active
		// try the next name
		set vendID=0
		set NextName=$o(^Phonebook.VendorI("NameIndex",NextName))
		quit:($e(NextName,1,$l(StartName))'=StartName)
	}
	
	quit:(vendID=0) ""
	Set pContact=..GetContact("Vendor",vendID)
	set dContact=..BuildContact(pContact,vendID)
	quit dContact
]]></Implementation>
</Method>

<Method name="PersonalByName">
<ClassMethod>1</ClassMethod>
<FormalSpec>Name:%String,Owner:%String</FormalSpec>
<ReturnType>Phonebook.ContactData</ReturnType>
<Implementation><![CDATA[
	set (StartName,NextName)=" "_$zcvt($zstrip(Name,">W"),"U")
	if '$d(^Phonebook.PersonalI("NameIndex",StartName))
	{
		// find first possible matching name, quit if no match
		set NextName=$o(^Phonebook.PersonalI("NameIndex",StartName))
		quit:($e(NextName,1,$l(StartName))'=StartName) ""
	}
	
	// loop to find first matching name that is also active
	set map=..#MAP
	for
	{
		set persID=$o(^Phonebook.PersonalI("NameIndex",NextName,""))
		set active=$d(^Phonebook.PersonalI("ActiveIndex",1,persID))
		set pContact=..GetContact("Personal",persID)
		
		// check if owner is valid also
		set owner=$li(pContact,$lf(map,"Owner"))
		quit:(active)&&(owner=Owner)

		// try the next name
		set persID=0
		set NextName=$o(^Phonebook.PersonalI("NameIndex",NextName))
		quit:($e(NextName,1,$l(StartName))'=StartName)
	}

	quit:(persID=0) ""
	Set dContact=..BuildContact(pContact,persID)
	quit dContact
]]></Implementation>
</Method>

<Method name="GetPersonal">
<ClassMethod>1</ClassMethod>
<FormalSpec>ContactID:%String</FormalSpec>
<ReturnType>Phonebook.ContactData</ReturnType>
<Implementation><![CDATA[
	Set pContact=..GetContact("Personal",ContactID)
	Set dContact=..BuildContact(pContact,ContactID)
	quit dContact
]]></Implementation>
</Method>

<Method name="GetVendor">
<ClassMethod>1</ClassMethod>
<FormalSpec>ContactID:%String</FormalSpec>
<ReturnType>Phonebook.ContactData</ReturnType>
<Implementation><![CDATA[
	Set pContact=..GetContact("Vendor",ContactID)
	Set dContact=..BuildContact(pContact,ContactID)
	quit dContact
]]></Implementation>
</Method>

<Method name="GetCustomer">
<ClassMethod>1</ClassMethod>
<FormalSpec>ContactID:%String</FormalSpec>
<ReturnType>Phonebook.ContactData</ReturnType>
<Implementation><![CDATA[
	Set pContact=..GetContact("Customer",ContactID)
	Set dContact=..BuildContact(pContact,ContactID)
	quit dContact
]]></Implementation>
</Method>

<Method name="GetContact">
<ClassMethod>1</ClassMethod>
<FormalSpec>Type:%String,ContactID:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set pContact=$case(Type,"Customer":^Phonebook.CustomerD(ContactID),
	                       "Personal":^Phonebook.PersonalD(ContactID),
	                       "Vendor"  :^Phonebook.VendorD(ContactID))
	quit pContact
]]></Implementation>
</Method>

<Method name="BuildContact">
<ClassMethod>1</ClassMethod>
<FormalSpec>pContact:%String,ContactID:%String</FormalSpec>
<ReturnType>Phonebook.ContactData</ReturnType>
<Implementation><![CDATA[
	
	Set dContact=##class(Phonebook.ContactData).%New()
	Set dCompany=##class(Phonebook.CompanyData).%New()
	
	set map=..#MAP
	Set dContact.ContactID = ContactID
	Set dContact.Name=$li(pContact,$lf(map,"Name"))
	Set dContact.Title=$li(pContact,$lf(map,"Title"))
	
	Set dContact.HomePhone=$li(pContact,$lf(map,"HomePhone"))
	Set dContact.OfficePhone=$li(pContact,$lf(map,"OfficePhone"))
	Set dContact.CellPhone=$li(pContact,$lf(map,"CellPhone"))
	Set dContact.Email1=$li(pContact,$lf(map,"Email1"))
	Set dContact.Email2=$li(pContact,$lf(map,"Email2"))
	Set dContact.Owner=$li(pContact,$lf(map,"Owner"))
	Set dContact.Note=$li(pContact,$lf(map,"Note"))
	Set dContact.Active=$li(pContact,$lf(map,"Active"))
	Set dContact.Pager = $li(pContact,$lf(map,"Pager"))
	
	if ($li(pContact,$lf(map,"Company"))'="")
	{
		Set CompanyID=$li(pContact,$lf(map,"Company"))
		set dCompany = ##class(Phonebook.ContactFacade).GetCompany(CompanyID)
		set dContact.Company=dCompany
	}
	
	
	quit dContact
]]></Implementation>
</Method>

<Method name="GetCompany">
<ClassMethod>1</ClassMethod>
<FormalSpec>CompanyID:%String</FormalSpec>
<ReturnType>Phonebook.CompanyData</ReturnType>
<Implementation><![CDATA[
	set pCompany = ^Phonebook.CompanyD(CompanyID)
	set dCompany = ##class(Phonebook.CompanyData).%New()
	
	set companymap=$lb("","Address","Name")
	set dCompany.CompanyID=CompanyID
	set dCompany.Name=$li(pCompany,$lf(companymap,"Name"))
	set dCompany.Address=$li(pCompany,$lf(companymap,"Address"))
	
	quit dCompany
]]></Implementation>
</Method>

<Method name="CopyContact">
<ClassMethod>1</ClassMethod>
<FormalSpec>dContact:Phonebook.ContactData</FormalSpec>
<PublicList>map</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	Set $li(tContact,$lf(map,"Name"))=dContact.Name
	Set $li(tContact,$lf(map,"Title"))=dContact.Title
	Set $li(tContact,$lf(map,"HomePhone"))=dContact.HomePhone
	Set $li(tContact,$lf(map,"OfficePhone"))=dContact.OfficePhone
	Set $li(tContact,$lf(map,"CellPhone"))=dContact.CellPhone
	Set $li(tContact,$lf(map,"Email1"))=dContact.Email1
	Set $li(tContact,$lf(map,"Email2"))=dContact.Email2
	Set $li(tContact,$lf(map,"Owner"))=dContact.Owner
	Set $li(tContact,$lf(map,"Note"))=dContact.Note
	Set $li(tContact,$lf(map,"Active"))=dContact.Active
	Set $li(tContact,$lf(map,"Pager"))=dContact.Pager
	Set $li(tContact,$lf(map,"Company"))=dContact.Company.CompanyID
	quit tContact
]]></Implementation>
</Method>

<Method name="SavePersonal">
<ClassMethod>1</ClassMethod>
<FormalSpec>dContact:Phonebook.ContactData</FormalSpec>
<PublicList>map</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set map=..#MAP

	set pContactID=dContact.ContactID
	if pContactID'=""
	{
		Set pContact=$g(^Phonebook.PersonalD(pContactID))
	}
	else
	{
		set pContact=""
		set pContactID=$i(^Phonebook.PersonalD)
	}
		
	set tContact=..CopyContact(dContact)
	set (oldname,oldactive,oldowner)=""
	if (pContact'="")
	{
		set oldname=$li(pContact,$lf(map,"Name"))
		set oldname=" "_$zcvt($zstrip(oldname,">W"),"U")
		set oldactive=$li(pContact,$lf(map,"Active"))
		set oldowner=$li(pContact,$lf(map,"Owner"))
		set oldowner=" "_$zcvt($zstrip(oldowner,">W"),"U")
	}
	set newname=$li(tContact,$lf(map,"Name"))
	set newname=" "_$zcvt($zstrip(newname,">W"),"U")
	set newactive=$li(tContact,$lf(map,"Active"))
	set newowner=$li(tContact,$lf(map,"Owner"))
	set newowner=" "_$zcvt($zstrip(newowner,">W"),"U")
	tstart
	set ^Phonebook.PersonalD(pContactID)=tContact
	kill:(oldname'="") ^Phonebook.PersonalI("NameIndex",oldname,pContactID)
	set ^Phonebook.PersonalI("NameIndex",newname,pContactID)=""
	kill:(oldactive'="") ^Phonebook.PersonalI("ActiveIndex",oldactive,pContactID)
	set ^Phonebook.PersonalI("ActiveIndex",newactive,pContactID)=""
	kill:(oldowner) ^Phonebook.PersonalI("OwnerIndex",oldowner,pContactID)
	set ^Phonebook.PersonalI("OwnerIndex",newowner,pContactID)=""
	tcommit
	quit pContactID
]]></Implementation>
</Method>

<Method name="SaveVendor">
<ClassMethod>1</ClassMethod>
<FormalSpec>dContact:Phonebook.ContactData</FormalSpec>
<PublicList>map</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set map=..#MAP

	set pContactID=dContact.ContactID
	if pContactID'=""
	{
		Set pContact=$g(^Phonebook.VendorD(pContactID))
	}
	else
	{
		set pContact=""
		set pContactID=$i(^Phonebook.VendorD)
	}
		
	set tContact=..CopyContact(dContact)
	set (oldname,oldactive)=""
	if (pContact'="")
	{
		set oldname=$li(pContact,$lf(map,"Name"))
		set oldname=" "_$zcvt($zstrip(oldname,">W"),"U")
		set oldactive=$li(pContact,$lf(map,"Active"))
	}
	set newname=$li(tContact,$lf(map,"Name"))
	set newname=" "_$zcvt($zstrip(newname,">W"),"U")
	set newactive=$li(tContact,$lf(map,"Active"))
	tstart
	set ^Phonebook.VendorD(pContactID)=tContact
	kill:(oldname'="") ^Phonebook.VendorI("NameIndex",oldname,pContactID)
	set ^Phonebook.VendorI("NameIndex",newname,pContactID)=""
	kill:(oldactive'="") ^Phonebook.VendorI("ActiveIndex",oldactive,pContactID)
	set ^Phonebook.VendorI("ActiveIndex",newactive,pContactID)=""
	tcommit
	quit pContactID
]]></Implementation>
</Method>

<Method name="SaveCustomer">
<ClassMethod>1</ClassMethod>
<FormalSpec>dContact:Phonebook.ContactData</FormalSpec>
<PublicList>map</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set map=..#MAP

	set pContactID=dContact.ContactID
	if pContactID'=""
	{
		Set pContact=$g(^Phonebook.CustomerD(pContactID))
	}
	else
	{
		set pContact=""
		set pContactID=$i(^Phonebook.CustomerD)
	}
		
	set tContact=..CopyContact(dContact)
	set (oldname,oldactive)=""
	if (pContact'="")
	{
		set oldname=$li(pContact,$lf(map,"Name"))
		set oldname=" "_$zcvt($zstrip(oldname,">W"),"U")
		set oldactive=$li(pContact,$lf(map,"Active"))
	}
	set newname=$li(tContact,$lf(map,"Name"))
	set newname=" "_$zcvt($zstrip(newname,">W"),"U")
	set newactive=$li(tContact,$lf(map,"Active"))
	tstart

	set ^Phonebook.CustomerD(pContactID)=tContact
	kill:(oldname'="") ^Phonebook.CustomerI("NameIndex",oldname,pContactID)
	set ^Phonebook.CustomerI("NameIndex",newname,pContactID)=""
	kill:(oldactive'="") ^Phonebook.CustomerI("ActiveIndex",oldactive,pContactID)
	set ^Phonebook.CustomerI("ActiveIndex",newactive,pContactID)=""

	tcommit
	quit pContactID
]]></Implementation>
</Method>

<Method name="GetCompanies">
<ClassMethod>1</ClassMethod>
<ReturnType>Phonebook.CompanyList</ReturnType>
<Implementation><![CDATA[
	
	set list=##class(Phonebook.CompanyList).%New()
	
	set company=""
	While 1
	{
    	Set company=$o(^Phonebook.CompanyI("NameIndex",company))
    	quit:(company="")
    	set ID=$o(^Phonebook.CompanyI("NameIndex",company,""))
    	Set dComp = ..GetCompany(ID)
    	do list.Insert(dComp)
 	}
	
	quit list
]]></Implementation>
</Method>

<Method name="GetPersonals">
<ClassMethod>1</ClassMethod>
<FormalSpec>owner:%String</FormalSpec>
<ReturnType>Phonebook.ContactList</ReturnType>
<Implementation><![CDATA[
	set owner = " "_$zcvt($zstrip(owner,">W"),"U")
	Set list = ##class(Phonebook.ContactList).%New()
	Set personal=""
	While 1
	{	
		set personal=$o(^Phonebook.PersonalI("NameIndex",personal))
		quit:(personal="")
		set ID=""
		while 1
		{
			set ID=$o(^Phonebook.PersonalI("NameIndex",personal,ID))
			quit:(ID="")
			continue:('$d(^Phonebook.PersonalI("ActiveIndex",1,ID)))
			continue:('$d(^Phonebook.PersonalI("OwnerIndex",owner,ID)))
			set pContact=..GetContact("Personal",ID)
			Set contact = ..BuildContact(pContact,ID)
			Do list.Insert(contact)
		}
	}
	
	quit list
]]></Implementation>
</Method>

<Method name="GetVendors">
<ClassMethod>1</ClassMethod>
<FormalSpec>owner:%String</FormalSpec>
<ReturnType>Phonebook.ContactList</ReturnType>
<Implementation><![CDATA[
	
	Set list = ##class(Phonebook.ContactList).%New()
	Set vendor=""
	While 1
	{	
		set vendor=$o(^Phonebook.VendorI("NameIndex",vendor))
		quit:(vendor="")
		set ID=""
		while 1
		{
			set ID=$o(^Phonebook.VendorI("NameIndex",vendor,ID))
			quit:(ID="")
			continue:('$d(^Phonebook.VendorI("ActiveIndex",1,ID)))
			set pContact=..GetContact("Vendor",ID)
			Set contact = ..BuildContact(pContact,ID)
			Do list.Insert(contact)
		}
	}
	
	quit list
]]></Implementation>
</Method>

<Method name="GetCustomers">
<ClassMethod>1</ClassMethod>
<FormalSpec>owner:%String</FormalSpec>
<ReturnType>Phonebook.ContactList</ReturnType>
<Implementation><![CDATA[
	
	Set list = ##class(Phonebook.ContactList).%New()
	Set customer=""
	While 1
	{	
		set customer=$o(^Phonebook.CustomerI("NameIndex",customer))
		quit:(customer="")
		set ID=""
		while 1
		{
			set ID=$o(^Phonebook.CustomerI("NameIndex",customer,ID))
			quit:(ID="")
			continue:('$d(^Phonebook.CustomerI("ActiveIndex",1,ID)))
			set pContact=..GetContact("Customer",ID)
			Set contact = ..BuildContact(pContact,ID)
			Do list.Insert(contact)
		}
	}
	
	quit list
]]></Implementation>
</Method>
</Class>

<Class name="Phonebook.ContactList">
<Super>%Library.ListOfObjects,%XML.Adaptor</Super>
<TimeCreated>60123,34422.201934</TimeCreated>

<Parameter name="ELEMENTTYPE">
<Default>Phonebook.ContactData</Default>
</Parameter>

<Storage name="Custom">
<Type>%Library.CompleteCustomStorage</Type>
</Storage>
</Class>


<Class name="Phonebook.Customer">
<ClassType>persistent</ClassType>
<Super>Phonebook.Contact</Super>
<TimeCreated>60110,52113.919279</TimeCreated>

<Query name="SelectCustomerByOwner">
<Type>%SQLQuery</Type>
<FormalSpec>Owner:%String</FormalSpec>
<SqlQuery><![CDATA[SELECT %ID,Name,Company->Name AS Company,Title,HomePhone,CellPhone FROM Customer WHERE Owner = :Owner and Active = 1]]></SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Query name="SelectCustomer">
<Type>%SQLQuery</Type>
<SqlQuery><![CDATA[SELECT %ID,Name,Title,OfficePhone,CellPhone,Company->Name AS Company FROM Customer WHERE Active = 1]]></SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Phonebook.CustomerD</DataLocation>
<DefaultData>CustomerDefaultData</DefaultData>
<IdLocation>^Phonebook.CustomerD</IdLocation>
<IndexLocation>^Phonebook.CustomerI</IndexLocation>
<StreamLocation>^Phonebook.ContactS</StreamLocation>
<Data name="CustomerDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Active</Value>
</Value>
<Value name="3">
<Value>CellPhone</Value>
</Value>
<Value name="4">
<Value>Company</Value>
</Value>
<Value name="5">
<Value>Email1</Value>
</Value>
<Value name="6">
<Value>Email2</Value>
</Value>
<Value name="7">
<Value>HomePhone</Value>
</Value>
<Value name="8">
<Value>Name</Value>
</Value>
<Value name="9">
<Value>Note</Value>
</Value>
<Value name="10">
<Value>OfficePhone</Value>
</Value>
<Value name="11">
<Value>Owner</Value>
</Value>
<Value name="12">
<Value>Pager</Value>
</Value>
<Value name="13">
<Value>Title</Value>
</Value>
</Data>
<Property name="Active"/>
<Property name="CellPhone"/>
<Property name="Company"/>
<Property name="CompanyAddress"/>
<Property name="ContactID"/>
<Property name="Email1"/>
<Property name="Email2"/>
<Property name="HomePhone"/>
<Property name="Name"/>
<Property name="Note"/>
<Property name="OfficePhone"/>
<Property name="Owner"/>
<Property name="Pager"/>
<Property name="Title"/>
</Storage>
</Class>


<Class name="Phonebook.DataController">
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeCreated>60117,41621.703703</TimeCreated>

<Method name="GetCompany">
<ClassMethod>1</ClassMethod>
<FormalSpec>CompanyID:%String</FormalSpec>
<ReturnType>Phonebook.CompanyData</ReturnType>
<Implementation><![CDATA[
		set dCompany = ##class(Phonebook.ContactFacade).GetCompany(CompanyID)
		quit dCompany
]]></Implementation>
</Method>

<Method name="GetContact">
<ClassMethod>1</ClassMethod>
<FormalSpec>ContactID:%String</FormalSpec>
<ReturnType>Phonebook.ContactData</ReturnType>
<Implementation><![CDATA[
		Set dContact = ##class(Phonebook.ContactFacade).GetContact("Personal",ContactID)
		quit dContact
]]></Implementation>
</Method>

<Method name="GetPersonal">
<ClassMethod>1</ClassMethod>
<FormalSpec>ContactID:%String</FormalSpec>
<ReturnType>Phonebook.ContactData</ReturnType>
<Implementation><![CDATA[
	Set dContact=##class(Phonebook.ContactFacade).GetPersonal(ContactID)
	quit dContact
]]></Implementation>
</Method>

<Method name="GetVendor">
<ClassMethod>1</ClassMethod>
<FormalSpec>ContactID:%String</FormalSpec>
<ReturnType>Phonebook.ContactData</ReturnType>
<Implementation><![CDATA[
	Set dContact=##class(Phonebook.ContactFacade).GetVendor(ContactID)
	quit dContact
]]></Implementation>
</Method>

<Method name="GetCustomer">
<ClassMethod>1</ClassMethod>
<FormalSpec>ContactID:%String</FormalSpec>
<ReturnType>Phonebook.ContactData</ReturnType>
<Implementation><![CDATA[
	Set dContact=##class(Phonebook.ContactFacade).GetCustomer(ContactID)
	quit dContact
]]></Implementation>
</Method>

<Method name="SaveContact">
<ClassMethod>1</ClassMethod>
<FormalSpec>dContact:Phonebook.ContactData</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set ContactID = ##class(Phonebook.ContactFacade).SaveContact(dContact)
	quit ContactID
]]></Implementation>
</Method>

<Method name="SavePersonal">
<ClassMethod>1</ClassMethod>
<FormalSpec>dContact:Phonebook.ContactData</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set ContactID=##class(Phonebook.ContactFacade).SavePersonal(dContact)	
	quit ContactID
]]></Implementation>
</Method>

<Method name="SaveCustomer">
<ClassMethod>1</ClassMethod>
<FormalSpec>dContact:Phonebook.ContactData</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[

	Set ContactID=##class(Phonebook.ContactFacade).SaveCustomer(dContact)	
	quit ContactID
]]></Implementation>
</Method>

<Method name="SaveVendor">
<ClassMethod>1</ClassMethod>
<FormalSpec>dContact:Phonebook.ContactData</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[

	Set ContactID=##class(Phonebook.ContactFacade).SaveVendor(dContact)	
	quit ContactID
]]></Implementation>
</Method>

<Method name="SearchCustomerByName">
<ClassMethod>1</ClassMethod>
<FormalSpec>name:%String,owner:%String</FormalSpec>
<ReturnType>Phonebook.ContactData</ReturnType>
<Implementation><![CDATA[
	set dContact=##class(Phonebook.ContactFacade).CustomerByName(name, owner)
	quit dContact
]]></Implementation>
</Method>

<Method name="SearchVendorByName">
<ClassMethod>1</ClassMethod>
<FormalSpec>name:%String,owner:%String</FormalSpec>
<ReturnType>Phonebook.ContactData</ReturnType>
<Implementation><![CDATA[
	set dContact=##class(Phonebook.ContactFacade).VendorByName(name, owner)
	quit dContact
]]></Implementation>
</Method>

<Method name="SearchPersonalByName">
<ClassMethod>1</ClassMethod>
<FormalSpec>name:%String,owner:%String</FormalSpec>
<ReturnType>Phonebook.ContactData</ReturnType>
<Implementation><![CDATA[
	set dContact=##class(Phonebook.ContactFacade).PersonalByName(name,owner)
	quit dContact
]]></Implementation>
</Method>

<Method name="GetCompanies">
<ClassMethod>1</ClassMethod>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	set list = ##class(Phonebook.ContactFacade).GetCompanies()
	quit list
]]></Implementation>
</Method>
</Class>


<Class name="Phonebook.EditCustomer">
<Description>
Created using the page template: Default</Description>
<Super>Phonebook.EditTemplatePage</Super>
<TimeCreated>60921,35183.318644</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>Phonebook.PhonebookApp</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Edit Customer</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
</Parameter>

<Parameter name="ERRORPAGE">
<Default>/csp/samples/error.csp</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
</style>
]]></Data>
</XData>

<XData name="HeaderAndSource">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen" title="">
<html id="pageHeader"><H2>Customer Contacts</H2> <br/></html>
<dataController id="source" modelClass="Phonebook.Customer" modelId=""/>
</pane>
]]></Data>
</XData>

<Method name="CreateRS">
<FormalSpec>*pSC:%Status,pInfo:%ZEN.Auxiliary.QueryInfo</FormalSpec>
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[
	set pSC = $$$OK
	
	set rs = ##class(%ResultSet).%New("Phonebook.Customer:SelectCustomer")
	set pInfo.parms(1) = $USERNAME
	
	Quit rs
]]></Implementation>
</Method>

<Method name="saveContact">
<FormalSpec>contactIndex:%Integer</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	set UN = $USERNAME
	&sql(UPDATE Phonebook.Customer set Owner=:UN WHERE ID=:contactIndex)
]]></Implementation>
</Method>
</Class>


<Class name="Phonebook.EditPersonal">
<Description>
Created using the page template: Default</Description>
<Super>Phonebook.EditTemplatePage</Super>
<TimeCreated>60921,36631.416077</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>Phonebook.PhonebookApp</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Edit Personal</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
</Parameter>

<Parameter name="ERRORPAGE">
<Default>/csp/samples/error.csp</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
</style>
]]></Data>
</XData>

<XData name="HeaderAndSource">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen">

<html id="pageHeader"><H2>Personal Contacts</H2> <br/></html>
<dataController id="source" modelClass="Phonebook.Personal" modelId="" />


</pane>
]]></Data>
</XData>

<Method name="CreateRS">
<FormalSpec>*pSC:%Status,pInfo:%ZEN.Auxiliary.QueryInfo</FormalSpec>
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[
	set pSC = $$$OK
	
	set rs = ##class(%ResultSet).%New("Phonebook.Personal:SelectPersonalByOwner")
	set pInfo.parms(1) = $USERNAME
	
	Quit rs
]]></Implementation>
</Method>

<Method name="saveContact">
<FormalSpec>contactIndex:%Integer</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	set UN = $USERNAME
	&sql(UPDATE Phonebook.Personal set Owner=:UN WHERE ID=:contactIndex)
]]></Implementation>
</Method>
</Class>


<Class name="Phonebook.EditTemplatePage">
<Description>
Template page for all Edit contact pages</Description>
<Abstract>1</Abstract>
<Super>Phonebook.Template</Super>
<TimeCreated>60921,34833.667573</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>Phonebook.PhonebookApp</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
</Parameter>

<Property name="deleteMsg">
<Type>%ZEN.Datatype.caption</Type>
<InitialExpression>$$$Text("OK to delete this record?","Phonebook")</InitialExpression>
</Property>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">

</style>
]]></Data>
</XData>

<XData name="RightSideContents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen" title="">
<vgroup>
<!-- Each Contact Edit subpage uses this pane to set the title and include the dataSource //-->
<pane paneName="HeaderAndSource" />
 <label  enclosingClass="zenLabel" value="Select a contact below or click 'New' to create a new contact." id="emptyMessage"/>
<!-- table of contacts //-->

<tablePane id="ContactTable" OnCreateResultSet="CreateRS"
	valueColumn="ID"
	showZebra="false"
	useKeys="true"
onselectrow="zenPage.rowSelected(zenThis,which);" showRowSelector="false"  
 width="830">
<!-- Columns do not specify which columns to show (the CreateRS does that) //-->
<!-- Instead, they control size and header names //-->
<column colName="ID" width="30"/>
<column colName="Name" width="200" />
<column colName="Title" width="150" />
<column colName="OfficePhone" width="125" header="Work Phone" />
<column colName="CellPhone" width="125" header ="Cell Phone"/>
<column colName="Company" width="200" />
</tablePane>


<html> <br/><H2>Edit</H2></html>
 <!-- form for editing contacts.  All fields start readOnly so that user must select row or click 'new' //-->
 <form controllerId="source" id="editForm" labelPosition="left">
  <hgroup>
  <vgroup cellVAlign="top" valign="top">
  <text label="ID:" id="idText" dataBinding="%id" 
        onblur="zenPage.loadRecord(zenThis.getValue())" value="" readOnly="true" labelClass="ro" />
  <text dataBinding="Name" id="name" label="Name: " readOnly="true" labelClass="ro"/>
  <text dataBinding="Title" id="titleText" label="Title: " readOnly="true" labelClass="ro"/>
  
 <dataCombo id="company" label="Company: " dataBinding="Company" OnCreateResultSet="CreateCompanyRS" 
 displayColumns="2" valueColumn="1" onchange="zenPage.companyChange();" readOnly="true" labelClass="ro"
  sqlLookup="SELECT Name FROM Phonebook.Company WHERE ID = ?"/>
  <textarea id ="companyAddress" label="Company Address: " readOnly="true" labelClass="ro"/>
  </vgroup>
  <spacer width="60px" />
  <vgroup cellVAlign="top" valign="top">
  <text dataBinding="OfficePhone" id="officePhone" label="Work Phone: " readOnly="true" labelClass="ro"/>
  <text dataBinding="HomePhone" id="homePhone" label="Home Phone: " readOnly="true" labelClass="ro"/>
  <text dataBinding="CellPhone" id="cellPhone" label="Cell Phone: " readOnly="true" labelClass="ro"/>
  <text dataBinding="Email1" id="email" label="Email: " readOnly="true" labelClass="ro"/>
  <text id="owner" dataBinding="Owner" label="Owner: " labelClass="ro" readOnly="true" />
  </vgroup>
  </hgroup>
  </form>
 <!-- Buttons are connected to methods working w/ MVC. //-->
  <hgroup>
    <button caption="New" onclick="zenPage.newRecord();" />
    <button caption="Save" id="Save" onclick="zenPage.save();" disabled="true"  />
    <button caption="Delete" onclick="zenPage.deleteItem();" />
</hgroup>
</vgroup>
</pane>
]]></Data>
</XData>

<Method name="CreateRS">
<Description>
Method that returns the ResultSet that populates the table.  Each edit subpage implements its own version.</Description>
<Abstract>1</Abstract>
<FormalSpec>*pSC:%Status,pInfo:%ZEN.Auxiliary.QueryInfo</FormalSpec>
<ReturnType>%ResultSet</ReturnType>
</Method>

<Method name="CreateCompanyRS">
<Description>
Loads the companies from the db</Description>
<FormalSpec>*pSC:%Status,pInfo:%ZEN.Auxiliary.QueryInfo</FormalSpec>
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[
	set pSC = $$$OK
	
	set rs = ##class(%ResultSet).%New("Phonebook.Company:SelectCompanies")
	
	Quit rs
]]></Implementation>
</Method>

<Method name="loadRecord">
<Description>
Takes the id of a contact, and sets the dataSource's modelId</Description>
<FormalSpec>id</FormalSpec>
<Language>javascript</Language>
<Implementation><![CDATA[
  var controller = zenPage.getComponentById('source');
  controller.setModelId(id);
]]></Implementation>
</Method>

<Method name="newRecord">
<Description>
Creates a new record and resets the fields.</Description>
<Language>javascript</Language>
<Implementation><![CDATA[
	var text = zenPage.getComponentById('idText');
  	text.setValue("");
  	
  	var addr = zenPage.getComponentById('companyAddress');
  	addr.setValue("");
  	
  var controller = zenPage.getComponentById('source');
  controller.createNewObject();
  
  	zenPage.unghostSave();
]]></Implementation>
</Method>

<Method name="save">
<Description>
Save the current contact</Description>
<Language>javascript</Language>
<Implementation><![CDATA[
  	var form = zenPage.getComponentById('editForm');
  	form.save();
  	var controller = zenPage.getComponentById('source');
	var id = controller.getModelId();
	
	if(zenPage.getComponentById('owner').getValue() == "")
		zenPage.saveContact(id);

	var table = zenPage.getComponentById('ContactTable');
	table.executeQuery(true);
]]></Implementation>
</Method>

<Method name="saveContact">
<Description>
Each contact subpage overrides this method.</Description>
<Abstract>1</Abstract>
<FormalSpec>contactIndex:%Integer</FormalSpec>
<ZenMethod>1</ZenMethod>
</Method>

<Method name="deleteItem">
<Language>javascript</Language>
<Implementation><![CDATA[
	if (confirm(this.deleteMsg)) {
		var controller = zenPage.getComponentById('source');
		controller.deleteId(controller.getModelId());
	
		var table = zenPage.getComponentById('ContactTable');
		table.executeQuery(true);
		
		zenPage.clearStuff();
		zenPage.ghostSave();
	}
]]></Implementation>
</Method>

<Method name="ghostSave">
<Description>
Used when user cannot interact with form.</Description>
<Language>javascript</Language>
<Implementation><![CDATA[
	zenPage.getComponentById('Save').setProperty('disabled',1);
	zenPage.getComponentById('name').setProperty('readOnly',1);
	zenPage.getComponentById('titleText').setProperty('readOnly',1);
	zenPage.getComponentById('company').setProperty('readOnly',1);
	zenPage.getComponentById('officePhone').setProperty('readOnly',1);
	zenPage.getComponentById('homePhone').setProperty('readOnly',1);
	zenPage.getComponentById('cellPhone').setProperty('readOnly',1);
	zenPage.getComponentById('email').setProperty('readOnly',1);
	zenPage.getComponentById('name').setProperty('labelClass','ro');
	zenPage.getComponentById('titleText').setProperty('labelClass','ro');
	zenPage.getComponentById('company').setProperty('labelClass','ro');
	zenPage.getComponentById('officePhone').setProperty('labelClass','ro');
	zenPage.getComponentById('homePhone').setProperty('labelClass','ro');
	zenPage.getComponentById('cellPhone').setProperty('labelClass','ro');
	zenPage.getComponentById('email').setProperty('labelClass','ro');
]]></Implementation>
</Method>

<Method name="unghostSave">
<Description>
Called to allow the user to interact with the form.</Description>
<Language>javascript</Language>
<Implementation><![CDATA[
	zenPage.getComponentById('Save').setProperty('disabled',0);
	zenPage.getComponentById('name').setProperty('readOnly',0);
	zenPage.getComponentById('titleText').setProperty('readOnly',0);
	zenPage.getComponentById('company').setProperty('readOnly',0);
	zenPage.getComponentById('officePhone').setProperty('readOnly',0);
	zenPage.getComponentById('homePhone').setProperty('readOnly',0);
	zenPage.getComponentById('cellPhone').setProperty('readOnly',0);
	zenPage.getComponentById('email').setProperty('readOnly',0);
	zenPage.getComponentById('name').setProperty('labelClass','zenLabel');
	zenPage.getComponentById('titleText').setProperty('labelClass','zenLabel');
	zenPage.getComponentById('company').setProperty('labelClass','zenLabel');
	zenPage.getComponentById('officePhone').setProperty('labelClass','zenLabel');
	zenPage.getComponentById('homePhone').setProperty('labelClass','zenLabel');
	zenPage.getComponentById('cellPhone').setProperty('labelClass','zenLabel');
	zenPage.getComponentById('email').setProperty('labelClass','zenLabel');
]]></Implementation>
</Method>

<Method name="clearStuff">
<Description>
Resets form fields when creating a new contact.</Description>
<Language>javascript</Language>
<Implementation><![CDATA[
	zenPage.getComponentById('idText').setValue("");
	zenPage.getComponentById('name').setValue("");
	zenPage.getComponentById('titleText').setValue("");
	zenPage.getComponentById('company').setValue("");
	zenPage.getComponentById('companyAddress').setValue("");
	zenPage.getComponentById('officePhone').setValue("");
	zenPage.getComponentById('homePhone').setValue("");
	zenPage.getComponentById('cellPhone').setValue("");
	zenPage.getComponentById('email').setValue("");
	zenPage.getComponentById('owner').setValue("");
]]></Implementation>
</Method>

<Method name="rowSelected">
<Description>
Enhances the use of arrow keys to navigate the table.</Description>
<FormalSpec>table,which</FormalSpec>
<Language>javascript</Language>
<Implementation><![CDATA[
	if ('keypress' == which) {
		// defer this action in case the user is arrowing through a number of items
		var id = table.getValue();
		var action = new Function("zenPage.getComponentById('source').setProperty('modelId','"+id+"');"); 
		zenSetDeferredAction(action,200);
		
		var text = zenPage.getComponentById('idText');
  		text.setValue(id);
	}
	else {
		// select immediately
		
  		
		var id = table.getValue();
		var controller = zenPage.getComponentById('source');
		controller.setProperty('modelId',id);
		var text = zenPage.getComponentById('idText');
  		text.setValue(id);
		zenPage.formChange();
	}
  	zenPage.unghostSave();
]]></Implementation>
</Method>

<Method name="formChange">
<Description>
When a new contact is selected, this method is called.</Description>
<Language>javascript</Language>
<Implementation><![CDATA[	zenPage.companyChange();
]]></Implementation>
</Method>

<Method name="companyChange">
<Description>
Changes the companyAddress field based on the company of the contact.</Description>
<Language>javascript</Language>
<Implementation><![CDATA[
	var company = zenPage.getComponentById('company');
	if(company.getValue() == "")
	{
		var companyAddress = zenPage.getComponentById('companyAddress');
		companyAddress.setValue("");
	}
	else
	{
		zenPage.loadCompanyAddress(company.getValue());
	}
]]></Implementation>
</Method>

<Method name="loadCompanyAddress">
<Description>
loadCompanyAddress</Description>
<FormalSpec>companyIndex:%Integer</FormalSpec>
<ZenMethod>1</ZenMethod>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	&sql(SELECT Address into :Addr FROM Phonebook.Company WHERE ID=:companyIndex)
	
	&js<var addr = zenPage.getComponentById('companyAddress');addr.setValue('#(Addr)#');>
]]></Implementation>
</Method>

<Method name="onlayoutHandler">
<Description>
This method is called when this page is resized.
In response to a resize, we use JavaScript to dynamically
resize the 2 main groups on this page.
You can modify this method to meet your needs.</Description>
<FormalSpec>load</FormalSpec>
<Language>javascript</Language>
<Implementation><![CDATA[
	// find enclosing div for the title (if present) and get its height
	var title = zenPage.getComponentById('title');
	var divTitle = title ? title.getEnclosingDiv() : null;
	var hgtTitle = divTitle ? parseInt(divTitle.offsetHeight) : 0;
	// find the enclosing divs for the 2 groups
	var groupLeft = zenPage.getComponentById('groupLeft');
	var groupRight = zenPage.getComponentById('groupRight');
	var divgroupLeft = groupLeft ? groupLeft.getEnclosingDiv() : null;
	var divgroupRight = groupRight ? groupRight.getEnclosingDiv() : null;
	// find height of window
	var winHeight = zenGetWindowHeight();
	var winWidth = zenGetWindowWidth();
	// adjust the size of groups
	var widLeft = divgroupLeft ? parseInt(divgroupLeft.offsetWidth) : 0;
	var widRight = winWidth - widLeft;
	//var hgt = winHeight - hgtTitle - 20;
	var hgt = winHeight - hgtTitle;
	if (divgroupLeft) {
		divgroupLeft.style.height = hgt + 'px';
	}
	if (divgroupRight) {
		divgroupRight.style.height = hgt + 'px';
		divgroupRight.style.width = widRight + 'px';
	}
]]></Implementation>
</Method>
</Class>


<Class name="Phonebook.EditVendor">
<Description>
Created using the page template: Default</Description>
<Super>Phonebook.EditTemplatePage</Super>
<TimeCreated>60921,36800.801698</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>Phonebook.PhonebookApp</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Edit Vendor</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
</Parameter>

<Parameter name="ERRORPAGE">
<Default>/csp/samples/error.csp</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
</style>
]]></Data>
</XData>

<XData name="HeaderAndSource">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen" title="">
<html id="pageHeader"><H2>Vendor Contacts</H2> <br/></html>
<dataController id="source" modelClass="Phonebook.Vendor" modelId=""/>
</pane>
]]></Data>
</XData>

<Method name="CreateRS">
<FormalSpec>*pSC:%Status,pInfo:%ZEN.Auxiliary.QueryInfo</FormalSpec>
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[
	set pSC = $$$OK
	
	set rs = ##class(%ResultSet).%New("Phonebook.Vendor:SelectVendor")
	set pInfo.parms(1) = $USERNAME
	
	Quit rs
]]></Implementation>
</Method>

<Method name="saveContact">
<FormalSpec>contactIndex:%Integer</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	set UN = $USERNAME
	&sql(UPDATE Phonebook.Vendor set Owner=:UN WHERE ID=:contactIndex)
]]></Implementation>
</Method>
</Class>


<Class name="Phonebook.Facade">
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeCreated>60144,49103.652177</TimeCreated>

<Method name="GetPersonals">
<ClassMethod>1</ClassMethod>
<ReturnType>Phonebook.ContactList</ReturnType>
<Implementation><![CDATA[
	
	Set list = ##class(Phonebook.ContactList).%New()
	Set rs=##class(%ResultSet).%New("Phonebook.Personal:Extent")
	do rs.Execute()
	While (rs.Next()){
		
		Set contact = ##class(Phonebook.ContactFacade).GetContact(rs.Data("ID"))
		Do list.Insert(contact)
		
	}
	
	quit list
]]></Implementation>
</Method>

<Method name="GetVendors">
<ClassMethod>1</ClassMethod>
<ReturnType>Phonebook.ContactList</ReturnType>
<Implementation><![CDATA[
	
	Set list = ##class(Phonebook.ContactList).%New()
	Set rs=##class(%ResultSet).%New("Phonebook.Vendor:Extent")
	do rs.Execute()
	While (rs.Next()){
		
		Set contact = ##class(Phonebook.ContactFacade).GetContact(rs.Data("ID"))
		Do list.Insert(contact)
		
	}
	
	quit list
]]></Implementation>
</Method>

<Method name="GetCustomers">
<ClassMethod>1</ClassMethod>
<ReturnType>Phonebook.ContactList</ReturnType>
<Implementation><![CDATA[
	
	Set list = ##class(Phonebook.ContactList).%New()
	Set rs=##class(%ResultSet).%New("Phonebook.Customer:Extent")
	do rs.Execute()
	While (rs.Next()){
		
		Set contact = ##class(Phonebook.ContactFacade).GetContact(rs.Data("ID"))
		Do list.Insert(contact)
		
	}
	
	quit list
]]></Implementation>
</Method>

<Method name="SavePersonals">
<ClassMethod>1</ClassMethod>
<FormalSpec>list:Phonebook.ContactList</FormalSpec>
<Implementation><![CDATA[
	
	for i=1:1:list.Count()
	{
		
		set contact = list.GetAt(i)
		do ##class(Phonebook.ContactFacade).SavePersonal(contact)
				
		
	}
]]></Implementation>
</Method>

<Method name="SaveVendors">
<ClassMethod>1</ClassMethod>
<FormalSpec>list:Phonebook.ContactList</FormalSpec>
<Implementation><![CDATA[
	
	for i=1:1:list.Count()
	{
		
		set contact = list.GetAt(i)
		do ##class(Phonebook.ContactFacade).SaveVendor(contact)
				
		
	}
]]></Implementation>
</Method>

<Method name="SaveCustomers">
<ClassMethod>1</ClassMethod>
<FormalSpec>list:Phonebook.ContactList</FormalSpec>
<Implementation><![CDATA[
	
	for i=1:1:list.Count()
	{
		
		set contact = list.GetAt(i)
		do ##class(Phonebook.ContactFacade).SaveCustomer(contact)
				
		
	}
]]></Implementation>
</Method>

<Method name="GetCompanies">
<ClassMethod>1</ClassMethod>
<ReturnType>Phonebook.ObjectList</ReturnType>
<Implementation><![CDATA[
	
	Set list = ##class(Phonebook.ContactList).%New()
	Set rs=##class(%ResultSet).%New("Phonebook.Company:Extent")
	do rs.Execute()
	While (rs.Next()){
		
		Set contact = ##class(Phonebook.ContactFacade).GetCompany(rs.Data("ID"))
		Do list.Insert(contact)
		
	}
	
	quit list
]]></Implementation>
</Method>
</Class>


<Class name="Phonebook.Login">
<Description>
Created using the page template: Default</Description>
<Super>%ZEN.Component.page</Super>
<TimeCreated>60844,52310.919386</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>Phonebook.PhonebookApp</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Login</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
</Parameter>

<Parameter name="ERRORPAGE">
<Default>/csp/samples/error.csp</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" title="RoloCube v2.5">
<html id="title">RoloCube v2.0<br/>Login</html>

<vgroup id="groupRight" height="100%" align="center" cellAlign="center">
<vgroup>
<spacer height="20px" />
<loginForm id="loginForm" >
<text name="CacheUserName" label="Username: " onkeypress="return zenPage.formEnterSubmit(zenThis)" /> <password name="CachePassword" label="Password: " onkeypress="return zenPage.formEnterSubmit(zenThis)" /> <submit caption="Login" action="Login" nextPage="Phonebook.AllStart.cls"/>
</loginForm>

  <spacer height="10px" />
  <html id ="LoginErrorMsg" OnDrawContent="PrintLoginError"/>
</vgroup>

</vgroup>
</page>
]]></Data>
</XData>

<Method name="formEnterSubmit">
<Description>
submit the form when an enter is pressed</Description>
<FormalSpec>inThis</FormalSpec>
<Language>javascript</Language>
<Implementation><![CDATA[

    // Note, this event test is for Internet Explorer Only  
   if (window.event && window.event.keyCode == 13) { 
        var xForm=inThis.getForm();
         if (!xForm){
               //control is not in a form
         }else{
              xForm.submit();
        }
      }
]]></Implementation>
</Method>

<Method name="PrintLoginError">
<FormalSpec>pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	if ($get(%request.Data("$ZENLOGINFAILURE", 1)) = 1)
	{
		&html<<font color= "red">Incorrect username or password.  Please try again, or give up.</font>>
	}
	
	q $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Phonebook.ObjectList">
<Super>%Library.ListOfObjects,%XML.Adaptor</Super>
<TimeCreated>60123,51650.12007</TimeCreated>

<Parameter name="ELEMENTTYPE">
<Default>Phonebook.CompanyData</Default>
</Parameter>

<Storage name="Custom">
<Type>%Library.CompleteCustomStorage</Type>
</Storage>
</Class>


<Class name="Phonebook.Personal">
<ClassType>persistent</ClassType>
<Super>Phonebook.Contact,%ZEN.DataModel.Adaptor</Super>
<TimeCreated>60110,52113.677103</TimeCreated>

<Query name="AllPersonal2">
<Type>%SQLQuery</Type>
<SqlQuery>SELECT %ID,Active,CellPhone,Email1,HomePhone,Name,Note,OfficePhone,Owner,Pager,Title FROM Personal</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Query name="SomePersonal">
<Type>%SQLQuery</Type>
<SqlQuery>SELECT %ID,Active,CellPhone,Email1,HomePhone,Name,Note,OfficePhone,Owner,Pager,Title FROM Personal</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Property name="Owner">
<Type>%String</Type>
<Parameter name="ZENREADONLY" value="1"/>
</Property>

<Index name="OwnerIndex">
<Properties>Owner</Properties>
</Index>

<Query name="SelectPersonal">
<Type>%SQLQuery</Type>
<SqlQuery><![CDATA[SELECT %ID,Name,Company->Name AS Company,Title,HomePhone,CellPhone FROM Personal WHERE Active=1]]></SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Query name="SelectPersonalByOwner">
<Type>%SQLQuery</Type>
<FormalSpec>Owner:%String</FormalSpec>
<SqlQuery><![CDATA[SELECT %ID,Name,Title,OfficePhone,CellPhone,Company->Name AS Company FROM Personal WHERE Owner = :Owner and Active=1]]></SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Phonebook.PersonalD</DataLocation>
<DefaultData>PersonalDefaultData</DefaultData>
<IdLocation>^Phonebook.PersonalD</IdLocation>
<IndexLocation>^Phonebook.PersonalI</IndexLocation>
<StreamLocation>^Phonebook.PersonalS</StreamLocation>
<Data name="PersonalDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Active</Value>
</Value>
<Value name="3">
<Value>CellPhone</Value>
</Value>
<Value name="4">
<Value>Company</Value>
</Value>
<Value name="5">
<Value>Email1</Value>
</Value>
<Value name="6">
<Value>Email2</Value>
</Value>
<Value name="7">
<Value>HomePhone</Value>
</Value>
<Value name="8">
<Value>Name</Value>
</Value>
<Value name="9">
<Value>Note</Value>
</Value>
<Value name="10">
<Value>OfficePhone</Value>
</Value>
<Value name="11">
<Value>Owner</Value>
</Value>
<Value name="12">
<Value>Pager</Value>
</Value>
<Value name="13">
<Value>Title</Value>
</Value>
</Data>
<Property name="Active"/>
<Property name="CellPhone"/>
<Property name="Company"/>
<Property name="CompanyAddress"/>
<Property name="ContactID"/>
<Property name="Email1"/>
<Property name="Email2"/>
<Property name="HomePhone"/>
<Property name="Name"/>
<Property name="Note"/>
<Property name="OfficePhone"/>
<Property name="Owner"/>
<Property name="Pager"/>
<Property name="Title"/>
</Storage>
</Class>


<Class name="Phonebook.PhonebookApp">
<Description>
Phonebook.PhonebookApp</Description>
<Super>%ZEN.application</Super>
<TimeCreated>60841,57956.371873</TimeCreated>

<Parameter name="APPLICATIONNAME">
<Description>
This is the name of this application.</Description>
<Default>RoloCube v2.5</Default>
</Parameter>

<Parameter name="HOMEPAGE">
<Description>
This is the URL of the main starting page of this application.</Description>
<Default>Phonebook.AllStart.Cls</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains application-wide CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
#title {
	  float: left;
  width: 100%;
  height: 100px;
  font-family: tahoma;
  font-weight: bold;
  font-size: 1.5em;

  border-bottom: 1px solid #000000;
  border-top: 2px solid #000000;
  padding: .25em;
  padding-left: 130px;  

  background-color: #66CCFF;
  background-image: url('cube_logo_blue.gif');
  background-repeat: no-repeat;
  background-position: .5em;

}

/* group on right-hand side */
#groupRight {
	border-right: 1px solid black;
	background: #96EE96;
	height: 100%;
	overflow: auto;
	padding-left: 20px;
}

#groupLeft {
	  float: left;
  list-style-type: none;

  padding-left: 0px;
  
  border-right: 1px solid #000000;
  border-bottom: 0px solid #000000;
  background-color: #DDDDDD
}


/* Style for even-rows when using zebra styling. */
.tpEven {
	background-color: 66CCFF;
	color: 000000;
}

.tpOdd {
	color: 000000;
}

H2 {
	font-family: tahoma;
  font-weight: bold;
  font-size: 1.5em;
}


.zenLabel {
	font-family: tahoma;
}

#footer {
   float: left;
   clear: left;
   width: 100%;

   padding-left: 1em;

   background-color: #DDDDDD;
   border-top: 1px solid #000000;
   border-bottom: 2px solid #000000;
}
 
p {
	font-family: tahoma;
}

/* Style for labels of read-only fields */
.ro {
	font-family: tahoma;
	color: #888888;
}
/* Wrapper for dropdown of combobox. */
.comboboxDropDown {
	font-family: tahoma;
}
/* Style for textarea. */
.textarea {
	font-family:tahoma;
}
/* Style for button (input). */
.button {
	font-family: tahoma;
	font-size: 1em;
}

.body {
  	font-family: tahoma;
}
</style>
]]></Data>
</XData>
</Class>


<Class name="Phonebook.Template">
<Description>
Main template page for all pages in the Phonebook App</Description>
<Super>%ZEN.Component.page</Super>
<TimeCreated>61144,32007.540303</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>Phonebook.PhonebookApp</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
.vmenuTable {
	border: 0px;
  padding: 0px;
  margin: 3px;
}

a.menuItem {
	   display: block;
   width: 9em;
   text-align: left;
   color: black;
   border: 0px;
   font-weight: bold;
   font-size: 1.25em;
  padding: 0px;
  margin: 3px;

}

a.menuItemDisabled  {
	display: block;
   width: 9em;
   text-align: left;
   color: grey;
   border: 0px;
   font-weight: bold;
   font-size: 1.25em;
   text-decoration: none;
  padding: 0px;
  margin: 3px;

}
	
a.menuItem:hover {
  background-color: #AAAAAA;
  border: 0px;
  padding: 0px;
  margin: 3px;
}
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:phonebook="http://www.intersystems.com/phonebook" title="RoloCube v2.5">
<html id="title" OnDrawContent="DrawTitle"/>
<hgroup id="hgroup" width="100%">
<vgroup id="groupLeft">
<!-- put contents of left column here -->
<!-- Side menu contains links to other pages //-->
<vmenu id="sideMenu" caption ="Main Menu">
	<menuItem id="homeMenuItem" caption="Home" link="Phonebook.AllStart.cls"/>
	<menuItem id="personalMenuItem" caption="Personal" link="Phonebook.EditPersonal.cls"/>
	<menuItem id="customerMenuItem" caption="Customer" link="Phonebook.EditCustomer.cls" />
	<menuItem id="vendorMenuItem" caption="Vendor" link="Phonebook.EditVendor.cls" />
	<menuItem id="logoutMenuItem" caption="Logout" link="javascript:zenPage.logout();" />
	</vmenu>

</vgroup>
<vgroup id="groupRight">
<!-- put contents of right column here -->
<spacer height="10px" />
<hgroup>
<spacer width="20px" />
<!-- This pane is implemented in all subpages //-->
<pane paneName="RightSideContents" />
</hgroup>
</vgroup>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="logout">
<Description>
Called when user clicks logout menu item. Logs user out (ends session) and returns to login page.</Description>
<Language>javascript</Language>
<Implementation><![CDATA[
	zenPage.ServerLogout();
	zenPage.gotoPage("Phonebook.AllStart.cls");
]]></Implementation>
</Method>

<Method name="ServerLogout">
<ReturnType>%Status</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	s %session.EndSession = 1
	q $$$OK
]]></Implementation>
</Method>

<Method name="DrawTitle">
<Description>
Draws the title using the page's name</Description>
<FormalSpec>pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&html<RoloCube v2.5<br/>#($ZCVT(..#PAGENAME,"O","HTML"))#>
	q $$$OK
]]></Implementation>
</Method>

<Method name="%OnAfterCreatePage">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//if user has U:PersonalOnly and is not a member of %All
	//Then disable the customer and vendor menus
	if ($System.Security.Check("PersonalOnly","Use") & ($Roles '[ "%All"))
	{
		set cMenu = %page.%GetComponentById("customerMenuItem")
		set vMenu = %page.%GetComponentById("vendorMenuItem")
		 If '$IsObject(cMenu) {
    		Quit $$$OK
  		}
		 If '$IsObject(vMenu) {
    		Quit $$$OK
  		}

		set cMenu.disabled = 1
		set vMenu.disabled = 1
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="onlayoutHandler">
<Description>
This method is called when this page is resized.
In response to a resize, we use JavaScript to dynamically
resize the 2 main groups on this page.
You can modify this method to meet your needs.</Description>
<FormalSpec>load</FormalSpec>
<Language>javascript</Language>
<Implementation><![CDATA[
	// find enclosing div for the title (if present) and get its height
	var title = zenPage.getComponentById('title');
	var divTitle = title ? title.getEnclosingDiv() : null;
	var hgtTitle = divTitle ? parseInt(divTitle.offsetHeight) : 0;
	// find the enclosing divs for the 2 groups
	var groupLeft = zenPage.getComponentById('groupLeft');
	var groupRight = zenPage.getComponentById('groupRight');
	var divgroupLeft = groupLeft ? groupLeft.getEnclosingDiv() : null;
	var divgroupRight = groupRight ? groupRight.getEnclosingDiv() : null;
	// find height of window
	var winHeight = zenGetWindowHeight();
	var winWidth = zenGetWindowWidth();
	// adjust the size of groups
	var widLeft = divgroupLeft ? parseInt(divgroupLeft.offsetWidth) : 0;
	var widRight = winWidth - widLeft;
	var hgt = winHeight - hgtTitle - 20;
	if (divgroupLeft) {
		divgroupLeft.style.height = hgt + 'px';
	}
	if (divgroupRight) {
		divgroupRight.style.height = hgt + 'px';
		divgroupRight.style.width = widRight + 'px';
	}
]]></Implementation>
</Method>
</Class>


<Class name="Phonebook.Utilities">
<Super>%RegisteredObject</Super>
<TimeCreated>60110,47293.869735</TimeCreated>

<Method name="FillEmUp">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
		Do ##class(Phonebook.Personal).Populate(3,1)
		Do ##class(Phonebook.Vendor).Populate(3,1)
		Do ##class(Phonebook.Customer).Populate(3,1)
		Do ##class(Phonebook.Company).Populate(3,1)
		
		Set company1=##class(Phonebook.Company).%OpenId(1)
		Set company2=##class(Phonebook.Company).%OpenId(2)
		set company3=##class(Phonebook.Company).%OpenId(3)
		
		//for i=1:1:9 {
		for con="Personal","Vendor","Customer" {
			for i=1:1:3 {	
				//Set contact=##class(Phonebook.Contact).%OpenId(i)
				set contact=$zobjclassmethod("Phonebook."_con,"%OpenId",i)
				
				set contact.Owner=$username
			
				if i#3=2
				{
					set contact.Company=company1
					
				}
			
				elseif i#3=1
				{
					set contact.Company=company2
				}
				
				elseif i#3=0
				{
					set contact.Company=company3
				}
			
				
				Do contact.%Save()
			}
		
		}
		
		Quit $$$OK
]]></Implementation>
</Method>

<Method name="KillEmAll">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
		Do ##class(Phonebook.Personal).%KillExtent()
		Do ##class(Phonebook.Customer).%KillExtent()
		Do ##class(Phonebook.Vendor).%KillExtent()
		Do ##class(Phonebook.Company).%KillExtent()
		
		 Quit $$$OK
]]></Implementation>
</Method>

<Method name="AssignCompanyNames">
<Description>
This method no longer works, because Contact is abstract now.</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	for i=1:1:9
	{
		set contact = ##class(Phonebook.Contact).%OpenId(i)
		
		if (i#3=2)
		{
			set contact.Company="Acme Industrial"
			do contact.%Save()	
		}
		
		if (i#3=1)
		{
			set contact.Company="Sunnydale Pest Control"
			do contact.%Save()	
		}
		
		if (i#3=0)
		{
			set contact.Company="Widget World"
			do contact.%Save()	
		}
		
	}
]]></Implementation>
</Method>

<Method name="CreateODL">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set filename= "C:\Documents and Settings\denelson\My Documents\Visual Studio Projects\Phonebook3\bin\Debug\SDClasses.odl"
	set classlist="Phonebook.Facade,Phonebook.ContactData,Phonebook.CompanyData,Phonebook.ContactList,Phonebook.ObjectList"
	
	do $System.OBJ.ExportODL(classlist,filename)
]]></Implementation>
</Method>
</Class>


<Class name="Phonebook.Vendor">
<ClassType>persistent</ClassType>
<Super>Phonebook.Contact</Super>
<TimeCreated>60110,51299.037995</TimeCreated>

<Query name="SelectVendor">
<Type>%SQLQuery</Type>
<SqlQuery><![CDATA[SELECT %ID,Name,Title,OfficePhone,CellPhone,Company->Name AS Company FROM Vendor WHERE Active = 1]]></SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Phonebook.VendorD</DataLocation>
<DefaultData>VendorDefaultData</DefaultData>
<IdLocation>^Phonebook.VendorD</IdLocation>
<IndexLocation>^Phonebook.VendorI</IndexLocation>
<StreamLocation>^Phonebook.VendorS</StreamLocation>
<Data name="VendorDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Active</Value>
</Value>
<Value name="3">
<Value>CellPhone</Value>
</Value>
<Value name="4">
<Value>Company</Value>
</Value>
<Value name="5">
<Value>Email1</Value>
</Value>
<Value name="6">
<Value>Email2</Value>
</Value>
<Value name="7">
<Value>HomePhone</Value>
</Value>
<Value name="8">
<Value>Name</Value>
</Value>
<Value name="9">
<Value>Note</Value>
</Value>
<Value name="10">
<Value>OfficePhone</Value>
</Value>
<Value name="11">
<Value>Owner</Value>
</Value>
<Value name="12">
<Value>Pager</Value>
</Value>
<Value name="13">
<Value>Title</Value>
</Value>
</Data>
<Property name="Active"/>
<Property name="CellPhone"/>
<Property name="Company"/>
<Property name="CompanyAddress"/>
<Property name="ContactID"/>
<Property name="Email1"/>
<Property name="Email2"/>
<Property name="HomePhone"/>
<Property name="Name"/>
<Property name="Note"/>
<Property name="OfficePhone"/>
<Property name="Owner"/>
<Property name="Pager"/>
<Property name="Title"/>
</Storage>
</Class>
</Export>
